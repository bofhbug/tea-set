#! ~/.bash/functions-ium

# This is set of shell functions to easy work with IUM in the command line 
# environment. They are classified as control commands and informational.

# All functions were developed and tested to be running under the majority 
# of shells and environments such as BASH, KSH, SH, Cygwin and MSys.

# =========================================================================

ium_cmd() {
	typeset FN="ium_cmd"

	if [ $# -eq 0 -a -z "${COL:-}" ]
	then
		cat <<HELP
NAME
	$FN - execute IUM commands

USAGE
	COL=COLLNAME $FN [OPTIONS]
	$FN -n COLLNAME [OPTIONS]

DESCRIPTION
	Execute the most frequently used IUM commands. 

	It requires that the environment variable SIU_HOME is set and 
	points to the proper IUM instance.

	COLLNAME is the name of a collector or the name of a collector's 
	configuration file and can be declared in two ways: 
	-- the environment variable; 
	-- the command line argument. 

OPTIONS
	s, start	Start the collector
	k, stop		Stop the collector

	f, flush	Flush the collector
	c, clean	Clean up the collector

	4		Set the log level to INFO
	8		Set the log level to DEBUG4

	t, tail		Print the log file (using tail -f)
	T, less		Print the log file (using less +F, if supported)

	S, save		Save a configuration file
	l, L, load	Load a configuration file

ENVIRONMENT
	SIU_HOME	The IUM instance directory (usually /opt/SIU)
	SIU_LOG		The IUM logging directory (usually /var/opt/SIU/log)
	SIU_EXT		The configuration file extension (by default .config)
HELP
		return
	fi

	# We can execute the function if only $SIU_HOME has been specified
	if [ -z "${SIU_HOME:-}" -o ! -x "$SIU_HOME/bin/siucontrol" ]
	then
		echo "$FN: SIU_HOME not defined or incorrect">&2
		return 1
	fi

	if ! echo "$PATH" | tr : '\n' | grep -qF "$SIU_HOME/bin"
	then
		echo "$FN: $SIU_HOME/bin not set to PATH">&2
		return 1
	fi

	if [ -z "$SIU_LOG" -o ! -d "$SIU_LOG" ]
	then
		echo "$FN: SIU_LOG not defined or incorrect">&2
		return 1
	fi

	# The default used extension of IUM configuration files
	typeset SIU_EXT="${SIU_EXT:-.config}"

	# The name of the collector could be specified as ...
	# ... the enviroment variable
	# COL=COLLNAME $FN [options]
	typeset COL="${COL:-}"

	# ... or the command line argument
	# $FN -n COLLNAME [options]
	if [ "$1" = "-n" ]
	then
		COL="$2"
		shift
		shift
	fi

	# Remove an extension if a filename was passed
	COL="${COL/%$SIU_EXT/}"

	# The collector's name is mandatory variable
	if [ -z "$COL" ]
	then
		echo "$FN: COL not specified">&2
		return 1
	fi

	# At least one action must be specified
	if [ $# -eq 0 ]
	then
		echo "$FN: Nothing to do">&2
		return 1
	fi

	# Execute each specified command
	typeset filename="$COL$SIU_EXT"

	while [ $# -gt 0 ]
	do
		case "$1" in
		s | start )
			siucontrol -n "$COL" -c startProc
			;;
		k | stop )
			siucontrol -n "$COL" -c stopProc
			;;
		f | flush )
			siucontrol -n "$COL" -c flushCol
			;;
		c | clean )
			siucontrol -n "$COL" -c cleanProc
			;;
		4 | 8 )
			siucontrol -n "$COL" -c setLogLevel "$1"
			;;
		t | tail | -f )
			tail -f "$SIU_LOG/$COL.log"
			;;
		T | less | -F )
			less +F "$SIU_LOG/$COL.log"
			;;
		S | save )
			saveconfig -n "$COL" -f "$filename"
			;;
		l | L | load )
			loadconfig -f "$filename" || return $?
			;;
		* )
			echo "$FN: Illegal argument: $1">&2
			return 1
			;;
		esac
		shift
	done
}

# =========================================================================

ium_ps() {
	typeset FN="ium_ps"

	if [ -z "${SIU_INSTANCE:-}" ]
	then
		echo "$FN: IUM instance not defined">&2
		return 1
	fi

	ps -ef | grep "$SIU_INSTANCE"
}

# =========================================================================

ium_show() {
	if [ $# -eq 0 ]
	then
		siucontrol -c showProcs
		return $?
	fi

	siucontrol -c showProcs | sed -n "$( printf '/%s$/,/---/p;' "$@" )"
}

# =========================================================================

ium_config() {
	typeset FN="ium_config"

	typeset SIUCONFIG="com.hp.siu.utils.TextFileConfigStore"

	if [ $# -eq 0 ]
	then
		cat <<HELP
NAME
	$FN - Save/load configuration in offline mode

USAGE
	$FN FILENAME

DESCRIPTION
	The function allows to save or load IUM configuration in offline 
	mode when there are no AdminAgentServer or ConfigServer running. 

	If the input file looks like "config.db", the binary file will 
	be converted to the text file "config.config".

	If the input file looks like "config.config", the text file will 
	be converted to the binary file "config.db". 

	In fact, this is wrapper over the following commands
	SIUJava $SIUCONFIG -a2b txt_file bin_file
	SIUJava $SIUCONFIG -b2a bin_file txt_file

ENVIRONMENT
	SIU_EXT		The configuration file extension (by default .config)
HELP
		return
	fi

	# The default used extension of IUM configuration files
	typeset SIU_EXT="${SIU_EXT:-.config}"

	typeset opt
	typeset ifile
	typeset ofile

	case ".${1##*.}" in
	".db" )
		opt="-b2a"
		ifile="$1"
		ofile="${1/%.db/$SIU_EXT}"
		;;
	"$SIU_EXT" )
		opt="-a2b"
		ifile="$1"
		ofile="${1/%$SIU_EXT/.db}"
		;;
	* )
		echo "$FN: $1: Could not to recognize suffix">&2
		return 1
		;;
	esac

	case "$( uname | tr [:upper:] [:lower:] )" in
	cygwin* )
		ifile="$( echo "$ifile" | cygpath -lmf - )"
		ofile="$( echo "$ofile" | cygpath -lmf - )"
		;;
	msys* | mingw* | windows* )
		ifile="$( echo "$ifile" | sed -e 's|^[\\/]\([a-zA-Z]\)[\\/]|\1:/|;s|\\|/|g' )"
		ofile="$( echo "$ofile" | sed -e 's|^[\\/]\([a-zA-Z]\)[\\/]|\1:/|;s|\\|/|g' )"
		;;
	esac

	SIUJava $SIUCONFIG $opt "$ifile" "$ofile"
}

# =========================================================================

__ium_initd_path() {
	typeset FN="__ium_initd_path"

	case "$( uname | tr [:upper:] [:lower:] )" in
	cygwin* | msys* | mingw* | windows* )
		# We are sure we are under Windows
		;;
	hpux* | hp-ux* )
		echo "/sbin/init.d"
		;;
	linux* )
		echo "/etc/rc.d/init.d"
		;;
	sunos* | solaris* )
		echo "/etc/init.d"
		;;
	* )
		echo "$FN: Unsupported OS: $( uname )">&2
		return 1
		;;
	esac
}

# =========================================================================

# Clean up the lists
unset SIU_RUNNING_LIST
unset SIU_INSTANCE_LIST
unset SIU_HOME_LIST
unset SIU_VAR_LIST
unset SIU_LOG_LIST

export SIU_INSTANCE
export SIU_HOME
export SIU_VAR
export SIU_LOG

# =========================================================================

ium_set_active() {
	typeset FN="ium_set_active"

	if [ $# -eq 0 ]
	then
		cat <<HELP
NAME
	$FN - Set to active the specified IUM instance

USAGE
	$FN OPTIONS

DESCRIPTION
	The function clean up the actual environment from the previous 
	usage and set environment for the another IUM instance. 

	When setting to active, the function modifies the environment 
	settings to operate easier.

	When setting to inactive, the function gracefully cleans up the 
	environment settings.

OPTIONS
	-1	Set to inactive and clean up the environment
	0-99	Set to active the instance by its number (see ium_check)
	SIU*	Set to active the instance by its name (SIU is the 
		mandatory part of the instance name)

ENVIRONMENT
	SIU_INSTANCE	The IUM instance name (usually SIU)
	SIU_HOME	The IUM instance directory (usually /opt/SIU)
	SIU_VAR		The IUM working directory (usually /var/opt/SIU)
	SIU_LOG		The IUM logging directory (usually /var/opt/SIU/log)

	PATH		The system-wide variable is set or unset to get 
			access to IUM-related tools in \$SIU_HOME/bin, 
			\$SIU_HOME/Solid/bin and \$SIU_HOME/mysql/bin.

	cdl		alias to speed up access to \$SIU_LOG
HELP
		return
	fi

	typeset index

	case "$1" in
	-1 )
		index=-1
		;;
	[0-9] | [1-9][0-9] )
		index="$1"
		if [ -z "${SIU_INSTANCE_LIST[$index]}" ]
		then
			echo "$FN: No instance found by index = $index">&2
			return 1
		fi
		;;
	SIU* )
		index="$( __ium_search_index "$1" "${SIU_INSTANCE_LIST[@]}" )"
		if [ -z "$index" ]
		then
			echo "$FN: Unknown instance: $1">&2
			return 1
		fi
		;;
	* )
		echo "$FN: Illegal argument: $1">&2
		return 1
		;;
	esac

	# Sanitize $PATH
	typeset p
	for p in "${SIU_HOME_LIST[@]}"
	do
		PATH="$( echo "$PATH" | tr : \\n | grep -vF "$p" | tr \\n : )"
		PATH="${PATH%%:}"
	done

	# Remove alias
	unalias cdl 2>/dev/null

	# Remove active instance
	unset SIU_INSTANCE
	unset SIU_HOME
	unset SIU_VAR
	unset SIU_LOG

	if [ $index -eq -1 ]
	then
		return
	fi

	# Set up and export new instance
	export SIU_INSTANCE="${SIU_INSTANCE_LIST[$index]}"
	export SIU_HOME="${SIU_HOME_LIST[$index]}"
	export SIU_VAR="${SIU_VAR_LIST[$index]}"
	export SIU_LOG="${SIU_LOG_LIST[$index]}"

	# Create alias
	alias cdl='cd "$SIU_LOG"'

	# Declare new paths in $PATH
	[ -d "$SIU_HOME/Solid/bin"  ] && PATH="$SIU_HOME/Solid/bin:$PATH"
	[ -d "$SIU_HOME/mysql/bin"  ] && PATH="$SIU_HOME/mysql/bin:$PATH"
	[ -d "$SIU_HOME/VoltDB/bin" ] && PATH="$SIU_HOME/VoltDB/bin:$PATH"
	PATH="$SIU_HOME/bin:$PATH"
}

# =========================================================================

__ium_search_index() {
	typeset FN="__ium_search_index"

	if [ $# -lt 2 ]
	then
		echo "$FN: 2 and more arguments required">&2
		return 1
	fi

	typeset value="$1"
	shift

	printf "%s\n" "$@" | awk -v n="$value" '$0 == n { print NR - 1; }'
}

# =========================================================================

__ium_startup() {
	# Assume call chain: SIUxxx -> __ium_startup SIUxxx

	case "$2" in
	start | start_agent | start_dbs )
		ium_set_active "$1"
		;;
	esac

	__ium_run "$@"

	case "$2" in
	stop | stop_agent | stop_dbs )
		ium_set_active -1
		;;
	esac
}

# =========================================================================

__ium_run() {
	# Assume call chain: SIUxxx -> __ium_startup SIUxxx -> __ium_run SIUxxx

	typeset FN="__ium_run"

	typeset SIU_INSTANCE="$1"
	shift

	typeset index="$( __ium_search_index "$SIU_INSTANCE" "${SIU_INSTANCE_LIST[@]}" )"
	if [ -z "$index" ]
	then
		echo "$FN: Bad instance name: $SIU_INSTANCE">&2
		return 1
	fi

	typeset SIU_HOME="${SIU_HOME_LIST[$index]}"

	typeset initd

	initd="$( __ium_initd_path )" || return $?

	# Non-empty value means one of the supported OS: Linux, HPUX, SunOS
	if [ -n "$initd" ]
	then
		$initd/$SIU_INSTANCE "$@"
		return $?
	fi

	typeset opt="$1"
	typeset mode="${opt%_*}"

	case "$opt" in
	start )
		$FN "$SIU_INSTANCE" start_dbs
		$FN "$SIU_INSTANCE" start_agent
		;;
	stop )
		$FN "$SIU_INSTANCE" stop_agent
		$FN "$SIU_INSTANCE" stop_dbs
		;;
	start_agent | stop_agent )
		net "$mode" "${SIU_INSTANCE}_AdminAgentServer"
		;;
	start_dbs | stop_dbs )
		[ -f "$SIU_HOME/Solid/bin/Solid.exe"  ] && net "$mode" "${SIU_INSTANCE}_Solid"
		[ -f "$SIU_HOME/mysql/bin/mysqld.exe" ] && net "$mode" "${SIU_INSTANCE}_MySQL"
		;;
	start_msg | stop_msg )
		echo "Emulating '$mode' of the $SIU_INSTANCE daemons"
		;;
	* )
		echo "Usage: $SIU_INSTANCE {start|stop|start_agent|stop_agent|start_dbs|stop_dbs|start_msg|stop_msg}"
		return 1
		;;
	esac
}

# =========================================================================

__ium_check() {
	typeset initd

	initd="$( __ium_initd_path )" || return $?

	# Empty value means Cygwin or MSys
	if [ -z "$initd" ]
	then
		wmic Service \
			WHERE "Name LIKE 'SIU%_AdminAgentServer'" \
			GET PathName,ProcessID,State 2>/dev/null \
		| sed '1d;$d' \
		| case "$( uname | tr [:upper:] [:lower:] )" in
		cygwin* )
			cygpath -uf -
			;;
		msys* | mingw* | windows* )
			sed -e 's|^\([a-zA-Z]\):|/\1|;s|\\|/|g'
			;;
		esac
		return $?
	fi

	typeset way
	typeset pid
	typeset state

	grep -h "INSTLROOT_=" $initd/SIU* 2>/dev/null \
	| sed 's|.*="||;s|"$|/|' \
	| xargs -IX find X -name adminagentserver 2>/dev/null \
	| while read way
	do
		pid="$( ps -ef | grep "$way" | grep -v grep | awk '{ print $2 }' )"
		if [ -z "$pid" ]
		then
			pid=0
			state="Stopped"
		else
			state="Running"
		fi
		echo "$way  $pid  $state"
	done
}

# =========================================================================

ium_alias() {
	alias | grep -E '(SIU|ium)\w*'
}

ium_env() {
	env | grep -E '^SIU\w*'
}

ium_func() {
	typeset -f | grep -E '^(SIU|ium)\w*' | sed 's/[^A-Za-z0-9_]*$//g'
}

# =========================================================================

ium_check() {
	cat <<EOD

===========================================================================

EOD

	# Save the current settings and turn off the unset variable errors
	typeset nounset="$( set -o | grep nounset | awk '{ print $2 }' )"
	set +o nounset

	# Deactivate all instances
	ium_set_active -1

	# Remove all functions
	[ ${#SIU_INSTANCE_LIST[@]} -gt 0 ] && unset -f "${SIU_INSTANCE_LIST[@]}"

	# Restore settings
	[ "$nounset" = "on" ] && set -o nounset

	# Clean up the lists
	unset SIU_RUNNING_LIST
	unset SIU_INSTANCE_LIST
	unset SIU_HOME_LIST
	unset SIU_VAR_LIST
	unset SIU_LOG_LIST

	typeset initd

	initd="$( __ium_initd_path )" || return $?

	typeset way
	typeset pid
	typeset state
	typeset name

	typeset index=-1
	typeset active_index

	typeset running_marker
	typeset runninglist
	typeset runninglist_length=0

	# @@@ BEGIN
	# This code for supporting the solution below
	typeset ium_check_file
	# We have to use this ugly code below because for some reasons 
	# msysGit doesn't have mktemp included to the standard package
	ium_check_file="$( mktemp 2>/dev/null || { f="$TMP/tmp.$RANDOM.$$" ; : >"$f" ; echo "$f" ; } )"
	__ium_check >"$ium_check_file"
	# @@@ END

	# @@@ BEGIN
	# Bourne Shell creates subshell every time it reads file in loops.
	# Bourne Shell does not support the following things:
	# - here strings <<<" ... "
	# - process substitutions < <( ... )
	# http://mywiki.wooledge.org/BashFAQ/024
	# http://heirloom.sourceforge.net/sh/sh.1.html#20
	exec 5<&0 <"$ium_check_file"
	# @@@ END

	while read -r way pid state
	do
		# Remove trailing "/bin/*"
		way="${way%/bin/*}"

		# Get the name of the instance
		name="${way##*/}"

		[ -n "$name" ] || continue

		# Fill the arays starting from index = 0
		(( index=index+1 ))

		SIU_RUNNING_LIST[$index]="$state"

		SIU_INSTANCE_LIST[$index]="$name"
		SIU_HOME_LIST[$index]="$way"

		if [ -z "$initd" ]
		then
			# Under Windows they could be:
			# SIU_HOME=/cygdrive/c/SIU
			# SIU_VAR=/cygdrive/c/SIU/var
			SIU_VAR_LIST[$index]="$way/var"
		else
			# Under Unix-like systems they are usually:
			# SIU_HOME=/opt/SIU
			# SIU_VAR=/var/opt/SIU
			# But to be sure we are reading the actual value 
			# from the starttup script $initd/SIU.
			typeset VARROOT_=""
			eval $( grep -h "VARROOT_=" "$initd/$name" 2>/dev/null )
			SIU_VAR_LIST[$index]="${VARROOT_:-/var/$way}"
		fi

#-		SIU_LOG_LIST[$index]="$way/var/log"
		SIU_LOG_LIST[$index]="${SIU_VAR_LIST[$index]}/log"

		# Create the startup function
		eval "
		$name() {
			__ium_startup '$name' \"\$@\";
		}
		"

		running_marker=" "
		if [ "$state" = "Running" ]
		then
			running_marker="*"
			active_index=$index
			runninglist[$runninglist_length]="$name"
			(( runninglist_length=runninglist_length+1 ))
		fi

		printf "% 4s  %-16s %s %s\n" "$index" "$name" "$running_marker" "$state"
	done

	# @@@ BEGIN
	exec <&5 5<&-
	# @@@ END

	# @@@ BEGIN
	rm "$ium_check_file"
	# @@@ END

	if [  $index -eq -1 ]
	then
		cat <<EOD

No IUM instances installed on the computer.

EOD
		return 1
	fi

	cat <<EOD

===========================================================================

EOD

	case $runninglist_length in
	1 )
		ium_set_active "$active_index"

		cat <<EOD

$SIU_INSTANCE is running from '$SIU_HOME'.
Instance Variables:

EOD
		ium_env
		;;
	0 )
		cat <<EOD

There are no running IUM instances.

EOD
		;;
	* )
		cat <<EOD

More than one running instance found:
${runninglist[@]}

EOD
		;;
	esac

	#echo -e "\nAliases:\n"
	#ium_alias

	cat <<EOD

Functions:

EOD
	ium_func

	cat <<EOD

===========================================================================

Execute 'SIUxxx start' to run an instance and set new variables.
Execute 'SIUxxx stop' to stop an instance and unset existing variables.
Execute 'ium_check' to re-check the instance list and update environment.
Execute 'ium_set_active' to set to active the another instance.
Execute 'ium_cmd' to perform a set of commands over collector(s).
Execute 'ium_ps' or 'ium_show' to output the list of IUM processes.

===========================================================================

EOD
}

# =========================================================================

[ -f ~/.ium_check ] && ium_check
[ -f ~/.ium_check ] || cat <<EOD

Execute 'ium_check' to know more.
Create file '~/.ium_check' to run it automatically.

EOD

# =========================================================================

# EOF
